==============================================================================================
Obtaining the main source code:
- First you will need to be added as a collaborator of the repository
- Ensure that VSCode or an appropriate IDE is installed
- Open terminal and navigate to a suitable directory, then enter
    - git clone https://github.com/chaafenr/fitcheck.git
    - cd flutter_app
After these 3 steps, the source code for the project will be accessible.

To view the pages and widgets used in the current beta release
  - cd lib
  - cd pages OR cd screens OR cd widgets

==============================================================================================

COMPLETE DIRECTORY STUCTURE:
├── .idea/
│   └── (IDE/IntelliJ config files: local settings, editor state, caches, etc.)
├── README.md
│
├── flutter_app/
│   ├── .dart_tool/
│   │   └── (Auto-generated by the Dart/Flutter tooling; contains build configs, caches, etc.)
│   ├── analysis_options.yaml   (Rules for code style, linting, and static analysis)
│   ├── codemagic.yaml          (Codemagic CI/CD config specifically for this Flutter project - stale)
│   ├── pubspec.lock            (Snapshot of currently installed dependency versions)
│   ├── pubspec.yaml            (Primary Flutter config & dependency listings)
│   ├── README.md               (An extra README focused on the Flutter subproject)
│   │
│   ├── amplify/
│   │   ├── #current-cloud-backend/
│   │   ├── backend/
│   │   ├── .config/
│   │   └── (Various AWS Amplify files/folders: CloudFormation templates, Lambda triggers, 
│           storage definitions, and backend config for user auth or S3 uploads)
│   │
│   ├── android/
│   │   ├── app/
│   │   ├── gradle/
│   │   ├── (Gradle files: `build.gradle`, `settings.gradle`, plus the Android app manifest)
│   │   └── (All the native Android project scaffolding, auto-managed by Flutter.)
│   │
│   ├── assets/
│   │   └── (Other images, logos, and static resources used in your Flutter UI)
│   │
│   ├── build/
│   │   └── (Build outputs for different platforms—generated automatically, not usually edited)
│   │
│   ├── ios/
│   │   ├── (Swift files, iOS project settings, plist files, and so on)
│   │   └── (This is the iOS native “Runner” project that Flutter wraps around your Dart code)
│   │
│   ├── lib/
│   │   ├── amplifyconfiguration.dart   (Configuration file for Amplify in Flutter)
│   │   ├── main.dart                  (Main entry point that calls `runApp(...)`)
│   │   │
│   │   ├── pages/
│   │   │   ├── home_page.dart         (Screen presenting user feed/daily outfit challenge)
│   │   │   ├── otp_verification.dart  (Logic for verifying phone/email OTP)
│   │   │   ├── phone_login.dart       (Phone number login/signup UI)
│   │   │   └── profile_page.dart      (User profile UI, includes posts, bio, and stats)
│   │   │
│   │   ├── screens/
│   │   │   ├── camera_screen.dart     (Camera interface for taking outfit photos)
│   │   │   └── preview_screen.dart    (Preview functionality before confirming upload)
│   │   │
│   │   ├── utils/
│   │   │   └── constants.dart         (Houses app-wide constants like colors, strings, sizes)
│   │   │
│   │   └── widgets/
│   │       ├── comment_section.dart   (Widget to display or add comments on a post)
│   │       ├── memories_grid.dart     (Grid layout for stored outfit photos or “memories”)
│   │       ├── post_card.dart         (A styled card widget showing user outfits/votes)
│   │       └── profile_header.dart    (Top section of the profile screen showing avatar, stats)
│   │
│   ├── linux/
│   ├── macos/
│   ├── web/
│   │   ├── index.html                 (Not used = just for HTML and PWA resources)
│   │
│   ├── test/
│   │   └── widget_test.dart           (Example Flutter widget test demonstrating how to test UIs)
│   │
│   └── windows/
│       └── (Windows desktop build config/cmake files needed by Flutter on Windows)
│
└── status reports/                    (Documents tracking progress, milestone summaries, or other team updates)

==============================================================================================
Prerequisites
  - Install Flutter and Dark SDK
  - Install Xcode
  - Install Visual Studio Code
  - Install Android Studio
  - Ensure flutter doctor passes all checks by running:
        flutter doctor 
  
Building the Software for iOS
  1. Launch Xcode on your mac
  2. Open the project by selecting File > Open and navigating to the project directory
  3. Select the Runner.xcworkspace file
  4. Open the terminal in Visual Studio Code by selecting the project-specific terminal (flutter_app directory)
  5. Install dependencies by running:
    flutter pub get
  6. Inside of your project terminal, navigate to the ios directory and install CocoaPods dependencies
      cd ios && pod install
  7. Build and run hte project from the terminal
      flutter run

Building the Software for Android
  1. Launch Android Studio on your computer
  2. Open the project by selecting File > Open and navigating to the project directory
  3. Install dependencies by opening the terminal in Android Studio and running:
    flutter pub get
  4. Open the AVD Manager by selecting Tools > AVD Manager
  5. Create or select an Android Virtual Device if one does not exist
  6. Launch the Android Emulator by clicking the Play button next to the selected AVD.
  7. Inside Android Studio, select the target device from the top bar.
  8. Click the build button

==============================================================================================
How to Test the Software
---------------------------
Prerequisites - Before running the tests, make sure you have the following installed:
- Xcode (for iOS development)
- Android Studio (for Android development)
- Flutter and Dart SDK

Running Test Cases
1. Clone the repository
  $ git clone https://github.com/chaafenr/fitcheck.git
  $ cd fitcheck
  $ cd flutter_app

2. Install Dependencies
  $ flutter pub get

3. Run Unit Tests
  $ flutter test

===============================================================================================================================================
How to Add New Tests
- Test Naming Conventions
    - Test files should be placed in the test/ directory.
    - All test file names must end with _test.dart. 
        - For example: login_test.dart, leaderboard_test.dart.
    - Tests should use descriptive function names for clarity.

- Types of Tests: FitCheck follows three types of tests, all run using Flutter’s built-in testing framework (flutter_test)
    - Unit Tests – Verifies individual functions, stored in test/unit/.
    - Widget Tests – Checks UI components, stored in test/widget/.
    - Integration Tests – Validates workflows across multiple modules, stored in integration_test/.

- Test Harness and Tools
    - Test Framework: flutter_test (default Flutter testing framework).
    - Test Execution: Run locally via flutter test

- Steps to Add a New Test
    1. Install Dependencies
      $ flutter pub get
    2. Create a test file in the appropriate test directory and write the test.
    3. Run the test locally

==============================================================================================
- How to build a release of the software. Describe any tasks that are not automated. For example, should a developer update a version number (in code and documentation) prior to invoking the build system? Are there any sanity checks a developer should perform after building a release?

