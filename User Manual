
HIGH LEVEL DESCRIPTION:
===============================================================================================================================================
FitCheck is a mobile app that turns everyday outfit planning into a fun, social experience. Each day, users see a “piece of clothing” challenge
and post a photo of themselves wearing that item before the deadline. Friends (and even new style enthusiasts on a Pinterest-like public feed) 
can view these posts, react, and give awards ranging from simple “hearts” to “best dressed” votes. Points tally up on a real-time leaderboard, 
sparking friendly competition while also offering style inspiration. Users can keep track of their past outfits on their personal profiles, 
follow friends’ style journeys, and discover new trends through the public “Outfit Board.” Whether someone wants quick feedback on a new look, 
motivation to dress up daily, or a creative space to share their personal style, FitCheck provides an engaging and community-driven platform 
for everyday fashion fun.


Aleksey - How to install the software (if applicable). If your system has prerequisites (e.g., tools, libraries, emulators, third-party applications, etc.), your instructions should list all of them and indicate how to install and configure them. Make sure to indicate what specific version requirements these prerequisites must satisfy. If running the system requires the installation of, e.g., a virtual machine, a database, or an emulator, make sure to provide clear step-by-step instructions.

Installing Prerequisites
    - Install Visual Studio Code
    - Install Flutter SDK and Dart SDK
    - Install Xcode (for iOS development) and Android Studio (for Android development)
    - Install CocoaPods (for iOS dependency management)
        - sudo gem install cocoapods
    - Ensure flutter doctor passes all checks by running:
        flutter doctor

Installing the Software for iOS
    - Open the project in Xcode by selecting File > Open and navigating to the project directory
    - Select the Runner.xcworkspace file
    - Ensure an iOS device or simulator is selected
    - Open the project in the terminal either in visual studio by selecting the project specific terminal (in our case the flutter_app directory)
    - Install the dependencies 
        flutter pub get
    - Navigate to the iOS directory and install CocoaPods dependencies
        cd ios && pod install
    - Then in the same project directory (flutter_run) run:
        flutter run

Installing the Software for Android
    - Open the project in Android Studio by selecting File > Open and navigating to the project directory
    - Ensure an Android emulator is set up in AVD Manager or a physical Android device is connected via USB
    - Open the project terminal in Visual Studio Code by selecting the project-specific terminal (in this case, the flutter_app directory).
    - Install the dependencies by running:
        flutter pub get
    - If using a physical device, enable USB Debugging:
        - Go to Settings > About phone and tap Build number seven times to enable Developer Options
        - Go to Settings > Developer options and enable USB debugging
    - Ensure the Android emulator or connected device is selected in Android Studio or VS Code
    - Run the application from the project directory by executing:
        flutter run

Lauren - How to run the software. How to start up the system (e.g., a getting started guide)?
Are there mobile device or browser requirements?

How To Run the Software
----------------------------------------------------
Running the Software in Xcode (iOS Simulator)
1. Open the Project in Xcode on your Mac.
    - Launch xCode on your Mac
    - Open the project by selecting File > Open and navifate to the project directory, then selecting the
      Runner.xcworkspace file.
2. Select the iOS simulator
    - In the top bar, next to the "Run" button, you will see the device selection dropdown. Click it to choose
      the desired iOS Simulator (e.g., iPhone 15)
3. Run the Application
    - Click the "Run" button at the top of Xcode
    - Xcode will build the project and launch the app in the selected simulator

Running the Software in Android Studio (Android Emulator)
1. Open the Project in Android Studio
    - Launch Android Studio on your computer
    - Open the project by selecting File > Open and navigating to the project directory
2. Create or Select an Android Virtual Device (AVD)
    - Open the AVD Manager by selecting Tools > AVD Manager
    - If you do not have an existing AVD, create a new one by clicking the "Create Virtual Device" button and
      following the prompts to select a device type, system image, and other configurations
    - Select a device (e.g., Pixel 3) and system image (e.g., API Level 30)
3. Launch the Android Emulator
    - Click the "Play" button next to the desired AVD in the AVD Manager to launch the emulator
4. Run the Application
    - In Android Studio, ensure the target device dropdown in the top bar is set to your running emulator
    - Click the "Run" button 
    - Android Studio will build the project and launch the app in the emulator

Running the Software on an iOS Device
1. Connect Your iOS Device
    - Use a USB/USB-C cable to connect your iphone to your Mac
2. Trust the Device
    -  On your iOS device, you may see a prompt asking you to trust the computer. Tap "Trust" and enter your
       device passcode.
3. Open the Project in Xcode
    - Launch XCode on your Mac and open the flutter project by selecting File > Open and navigating to the 
      project's directory, then selecting the Runner.xcworkspace file
4. Select Your iOS Device
    - In the top bar, next to the "Run" button, you will see the device selection dropdown. Select your connected
      iOS device.
5. Run the Application
    - Click the "Run" button to build and run the app on your iOS device.

Running the Software on an Android Device
1. Enable Developer Options
    -  On your Android device, go to Settings > About phone and tap "Build number" seven times to enable
        Developer Options.
2. Enable USB Debugging
    -  Go to Settings > Developer options and enable "USB debugging"
3. Connect Your Android Device
    -  Use a USB cable to connect your Android device to your computer
4. Authorize Debugging
    -  You may see a prompt on your Android device asking if you want to allow USB debugging. Tap "Allow"
5. Open the Project in Android Studio
    - Launch Android Studio and open the flutter project by selecting File > Open and nagivating to the project directory
6. Select Your Android Device
    - In Android Studio, ensure the target device dropdown in the top bar is set to your connected Android device.
7. Run the Application
    -  Click "Run" button in Android Studo to build and run the app on your Android device.

LEANNA - How to use the software. How does the user use the main features? You can assume that your user is familiar with your particular platform (e.g., use of a web browser, desktop applications, or mobile applications). For missing functionality, your documentation should simply indicate that this functionality is work in progress.

YASMINE - How to report a bug. This should include not just the mechanics (a pointer to your issue tracker), but also what information is needed. You can set up a bug-report template in your issue tracker, or you can reference a resource about how to write a good bug report. Here is an example for bug reporting guidelines.

- Known bugs. Known bugs or limitations should be documented in the bug tracker. A user testing the implemented use case(s) should not encounter trivial bugs or a large number of bugs that are unlisted in your bug tracker.

